<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 黑書記事</title>
    <link>https://absszero.github.io/post/</link>
    <description>Recent content in Posts on 黑書記事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Apr 2024 18:42:53 +0800</lastBuildDate><atom:link href="https://absszero.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laravel dynamic facade</title>
      <link>https://absszero.github.io/post/2024-04-11_laravel-dynamic-facade/</link>
      <pubDate>Thu, 11 Apr 2024 18:42:53 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2024-04-11_laravel-dynamic-facade/</guid>
      <description>Laravel 在 Facade 的使用很普遍，內建就提供了多種 Facade。並且在過去的使用情境也透過繼承 Illuminate\Support\Facades\Facade 建立自己的 Facade。唯獨 Dynamic Facade 我今天才發現它的好用！ 使用</description>
    </item>
    
    <item>
      <title>After extends the eslint rules</title>
      <link>https://absszero.github.io/post/2024-02-09_after-extends-the-eslint-rules/</link>
      <pubDate>Fri, 09 Feb 2024 09:57:24 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2024-02-09_after-extends-the-eslint-rules/</guid>
      <description>最早接觸到 TypeScript 開發是透過 VSCode 的 Your First Extension 範例。教學透過 Yeoman 使用 VS Code Extension Generator 產生。預設已經自帶 ESlint 檢查。所以也沒特別在意就直接開發。在近期我回頭檢視相關的規則</description>
    </item>
    
    <item>
      <title>Lint only diff files</title>
      <link>https://absszero.github.io/post/2024-02-05_lint-only-diff-files/</link>
      <pubDate>Mon, 05 Feb 2024 13:51:30 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2024-02-05_lint-only-diff-files/</guid>
      <description>過去我們會在提交的時候運行代碼風格檢查，但隨著檔案越來越多，檢查的時間也越來越長。但其實每次提交改動的檔案數量不多，所以可以根據改動的檔案做</description>
    </item>
    
    <item>
      <title>Mock multi openAPI documents with Prism via Traefik</title>
      <link>https://absszero.github.io/post/2024-01-25_mock-multi-open-api-documents-with-prism-via-traefik/</link>
      <pubDate>Thu, 25 Jan 2024 12:41:15 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2024-01-25_mock-multi-open-api-documents-with-prism-via-traefik/</guid>
      <description>Prism 可以藉由 openAPI 文件生成 mock server，官方也有針對這一塊說明如何處理多個檔案的情況： Serving Multiple OpenAPI Documents。該文章說明主要是透過 Caddy 作為反向代</description>
    </item>
    
    <item>
      <title>Laravel x Load Balancer x HTTPS</title>
      <link>https://absszero.github.io/post/2024-01-24-laravel-load-balancer-https/</link>
      <pubDate>Wed, 24 Jan 2024 12:35:27 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2024-01-24-laravel-load-balancer-https/</guid>
      <description>由於 Laravel 生成網址的功能是根據一些特定的 Headers，特別是生成 https 開頭網址。當產品環境單純直接使用 Web Server 掛載 SSL 憑證不會有類似問題。但如果搭配 Load Balancer</description>
    </item>
    
    <item>
      <title>Phead, A PHP code generator</title>
      <link>https://absszero.github.io/post/2024-01-06_phead/</link>
      <pubDate>Sat, 06 Jan 2024 11:08:07 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2024-01-06_phead/</guid>
      <description>結果在此： https://github.com/absszero/phead/ 開發 API 的節奏大致底定。開立路由、建立控制器、建立 Model、表現層以及撰寫相關測試。由於過程諸多類似，想必一定有可以簡化的方法。</description>
    </item>
    
    <item>
      <title>Develop in Docker</title>
      <link>https://absszero.github.io/post/2023-12-26_develop-in-docker/</link>
      <pubDate>Tue, 26 Dec 2023 20:45:34 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2023-12-26_develop-in-docker/</guid>
      <description>sDart Docker 在產品容器化使用確實方便，但在思索怎麼用在開發環境遇到的第一個難題是太慢。Docker Desktop 啟動速度慢，每次開啟心裡就開始計時到底要多久。看</description>
    </item>
    
    <item>
      <title>Laravl Goto 在新視窗開啟所有語系檔</title>
      <link>https://absszero.github.io/post/2023-12-22_laravel-goto-open-all-lanaguage-files/</link>
      <pubDate>Fri, 22 Dec 2023 10:17:33 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2023-12-22_laravel-goto-open-all-lanaguage-files/</guid>
      <description>十月的時候我從 Github 收到一個功能請求，希望能夠在 Laravel Goto for Sublime Text 實現選取語系的 key ，然後開啟所有對應語系檔在新視窗上面。實作過程並不特別困難。原理是檢索</description>
    </item>
    
    <item>
      <title>Laravel Command Class Name</title>
      <link>https://absszero.github.io/post/2023-10-31_laravel-command-classname/</link>
      <pubDate>Tue, 31 Oct 2023 11:31:24 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2023-10-31_laravel-command-classname/</guid>
      <description>Why 隨著 Laravel 開發的指令越多，要記得每一個指令的檔案位置也相對困難。由於從指令列執行 artisn list 只顯示每個指令所設定的 signature 屬性，但不曉得對應的檔案名稱。只期</description>
    </item>
    
    <item>
      <title>VSCode Extension Development, Run Single Test</title>
      <link>https://absszero.github.io/post/2023-09-22_vsce-extension-dev-add-test-single-test/</link>
      <pubDate>Fri, 22 Sep 2023 10:17:33 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2023-09-22_vsce-extension-dev-add-test-single-test/</guid>
      <description>隨著 VSCode 開發 Extension 愈趨複雜，相關的單元測試也越來越多。每次增加一個方法以及相對測試，整個套件的測試都得重新執行一遍。為了更有效率的進行開發，目前要</description>
    </item>
    
    <item>
      <title>開發踩坑, Laravel Goto for Sublime Text, Goto Middleware</title>
      <link>https://absszero.github.io/post/2023-09-19_sublime-laravel-goto-middleware-development/</link>
      <pubDate>Tue, 19 Sep 2023 10:27:48 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2023-09-19_sublime-laravel-goto-middleware-development/</guid>
      <description>Laravel Goto for VSCode 的 Middleware 轉跳功能完成後。隨後也逐步在 Laravel Goto for Sublime Text 把相同轉跳功能實做出來。正規表達式可以從 VSCode 研究結果套用，所以開發上還算快速。而且 Sublime Text Package 使用</description>
    </item>
    
    <item>
      <title>PHPUnit TearDown &amp; register_shutdown_function</title>
      <link>https://absszero.github.io/post/2023-03-25_phpunit-teardown-register_shutdown_function/</link>
      <pubDate>Sat, 25 Mar 2023 19:40:00 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2023-03-25_phpunit-teardown-register_shutdown_function/</guid>
      <description>WHAT 近期在開發 Laravel Log 相關套件。於是利用 orchestra/testbench 作為開發套件的工具。但是當所有測試都正常執行之後，結尾卻意外發生錯誤。 PHP Fatal error: Uncaught ReflectionException: Class config does not exist 原本這個問題以</description>
    </item>
    
    <item>
      <title>Prism 建立 API Server</title>
      <link>https://absszero.github.io/post/2020-02-06_prism-%E5%BB%BA%E7%AB%8B-api-server/</link>
      <pubDate>Thu, 06 Feb 2020 15:01:03 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2020-02-06_prism-%E5%BB%BA%E7%AB%8B-api-server/</guid>
      <description>Why Prism 撰寫一份 API 文件有許多方式，其中一種是根據 OpenAPI 規範。而在完成 API 規劃後通常搭配如 Swagger UI 將規範文件變成容易閱讀 API 文件。 但前端人員在真實 API 拿到之前，</description>
    </item>
    
    <item>
      <title>Guzzle service descriptions - 使用描述檔建立 API Client</title>
      <link>https://absszero.github.io/post/2019-10-06_guzzle-service-descriptions/</link>
      <pubDate>Sun, 06 Oct 2019 15:01:03 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2019-10-06_guzzle-service-descriptions/</guid>
      <description>何謂 Service Descriptions 最近在查找關於 Fixer.io 的用戶端套件。發現平常慣用的 Guzzle HTTP Client 還有另外一種開發方式 - service descriptions。該方式借鏡 Swagger 利用定義 API 操作的方式</description>
    </item>
    
    <item>
      <title>Laravel Goto for VS Code</title>
      <link>https://absszero.github.io/post/2019-09-09_laravel-goto-for-vs-code/</link>
      <pubDate>Mon, 09 Sep 2019 20:16:24 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2019-09-09_laravel-goto-for-vs-code/</guid>
      <description>https://github.com/absszero/vscode-laravel-goto Why 在完成 Laravel Goto for Sublime Text 之後，心想何不在 VS Code 上也試著實做一樣的套件？畢竟接觸到的套件多半只解決部份問題。其中一個未能解決的問題，就是 Namespace 的使用。 由</description>
    </item>
    
    <item>
      <title>Laravel Goto for Sublime Text</title>
      <link>https://absszero.github.io/post/2019-08-26_laravel-goto-for-sublime-text/</link>
      <pubDate>Mon, 26 Aug 2019 20:31:24 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2019-08-26_laravel-goto-for-sublime-text/</guid>
      <description>https://github.com/absszero/LaravelGoto Why 去年下定決心買一套 Sublime Text 之後（USD $75 的樣子），也算是認可 ST 在工作幫我省了不少時間。不過隨著 VS Code 功能逐步豐富，一直有想轉換編輯器的念頭。上</description>
    </item>
    
    <item>
      <title>透過 PHP 解析包含 BOM 的 CSV 文件</title>
      <link>https://absszero.github.io/post/2019-08-26_%E9%80%8F%E9%81%8E-php-%E8%A7%A3%E6%9E%90%E5%8C%85%E5%90%AB-bom-%E7%9A%84-csv-%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 26 Aug 2019 20:12:35 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2019-08-26_%E9%80%8F%E9%81%8E-php-%E8%A7%A3%E6%9E%90%E5%8C%85%E5%90%AB-bom-%E7%9A%84-csv-%E6%96%87%E4%BB%B6/</guid>
      <description>之前拿到的 csv 檔大部分都很乾淨，使用 PHP 內建的 fgetcsv 逐行解析不會有什麼問題，但今天解開一個欄位就發現它的字串長度跟預期的不同，並且無法用 ltrim 函式移除左</description>
    </item>
    
    <item>
      <title>SublimeLinter-phpcs 使用自訂規則檔</title>
      <link>https://absszero.github.io/post/2019-08-03_sublimelinter-phpcs-%E4%BD%BF%E7%94%A8%E8%87%AA%E8%A8%82%E8%A6%8F%E5%89%87%E6%AA%94/</link>
      <pubDate>Sat, 03 Aug 2019 16:57:39 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2019-08-03_sublimelinter-phpcs-%E4%BD%BF%E7%94%A8%E8%87%AA%E8%A8%82%E8%A6%8F%E5%89%87%E6%AA%94/</guid>
      <description>為了建立一個樣板專案，同時整合代碼風格檢查，今天莫名其妙踩了一些坑。 全編輯器設定 SublimeLinter Settings - User { &amp;#34;linters&amp;#34;: { &amp;#34;phpcs&amp;#34;: { &amp;#34;args&amp;#34;: &amp;#34;--standard=&amp;#39;${folder}/phpcs.xml&amp;#39;&amp;#34; } } } 個別專案設定，設定在 *.sublime-project { &amp;#34;settings&amp;#34;: { &amp;#34;SublimeLinter.linters.phpcs.args&amp;#34;: &amp;#34;--standard=&amp;#39;${folder}/phpcs.xml&amp;#39;&amp;#34;</description>
    </item>
    
    <item>
      <title>Hugo 開始書寫</title>
      <link>https://absszero.github.io/post/2019-08-03_hugo-%E9%96%8B%E5%A7%8B%E6%9B%B8%E5%AF%AB/</link>
      <pubDate>Sat, 03 Aug 2019 14:29:59 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2019-08-03_hugo-%E9%96%8B%E5%A7%8B%E6%9B%B8%E5%AF%AB/</guid>
      <description>wordpress.com 由於限制頗多，而且對於撰寫程式碼不是那麼友善（許多特殊符號需要自行轉譯處理）。參考官網提供的工具參考 https://gohugo.io/tools/migrations/ ，選用 https://github.com/palaniraja/blog2md 將匯出的文章轉換成 Hugo 格式。隨</description>
    </item>
    
    <item>
      <title>Redmine container with Docker</title>
      <link>https://absszero.github.io/post/2016-07-25_redmine-container-with-docker/</link>
      <pubDate>Mon, 25 Jul 2016 14:34:41 +0800</pubDate>
      
      <guid>https://absszero.github.io/post/2016-07-25_redmine-container-with-docker/</guid>
      <description>除了官方的 Docker image 之外，sameersbn/redmine 算是最火紅的 image。安裝說明也十分詳細，不過目前搭配外部的 MySQL Sever，並且該 Server 架</description>
    </item>
    
  </channel>
</rss>
