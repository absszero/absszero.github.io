<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 黑書記事</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in JavaScript on 黑書記事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Jul 2015 14:15:09 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript 關鍵字使用 in 判斷物件是否有該屬性成員</title>
      <link>http://localhost:1313/post/javascript-%E9%97%9C%E9%8D%B5%E5%AD%97%E4%BD%BF%E7%94%A8-in-%E5%88%A4%E6%96%B7%E7%89%A9%E4%BB%B6%E6%98%AF%E5%90%A6%E6%9C%89%E8%A9%B2%E5%B1%AC%E6%80%A7%E6%88%90%E5%93%A1/</link>
      <pubDate>Wed, 22 Jul 2015 14:15:09 +0000</pubDate>
      
      <guid>http://localhost:1313/post/javascript-%E9%97%9C%E9%8D%B5%E5%AD%97%E4%BD%BF%E7%94%A8-in-%E5%88%A4%E6%96%B7%E7%89%A9%E4%BB%B6%E6%98%AF%E5%90%A6%E6%9C%89%E8%A9%B2%E5%B1%AC%E6%80%A7%E6%88%90%E5%93%A1/</guid>
      <description>今天在別人的 js 範例當中看到一個關鍵字 in， 1 2 3 if (&amp;#39;items&amp;#39; in obj) { return obj.items; } 過去用過的 in 是 for..in，做為疊代物件屬性 1 for (var prop in obj) { ... } 從 stack overflow 看到這</description>
    </item>
    
    <item>
      <title>Services_JSON 解決 JavaScript 物件轉換成 PHP 陣列</title>
      <link>http://localhost:1313/post/services_json-%E8%A7%A3%E6%B1%BA-javascript-%E7%89%A9%E4%BB%B6%E8%BD%89%E6%8F%9B%E6%88%90-php-%E9%99%A3%E5%88%97/</link>
      <pubDate>Wed, 08 Apr 2015 15:21:40 +0000</pubDate>
      
      <guid>http://localhost:1313/post/services_json-%E8%A7%A3%E6%B1%BA-javascript-%E7%89%A9%E4%BB%B6%E8%BD%89%E6%8F%9B%E6%88%90-php-%E9%99%A3%E5%88%97/</guid>
      <description>Services_JSON 是 json_encode/json_decode 的實做，雖然 PHP 5.2 已經可以直接使用，不過格式比須是嚴謹的 JSON 格式(RFC 4627)。 但 JavaScript 的物件結構本身跟 JSON 格式相仿，這時候可以透過 Services_JSON 提供的</description>
    </item>
    
    <item>
      <title>瀏覽歷程 History.js</title>
      <link>http://localhost:1313/post/%E7%80%8F%E8%A6%BD%E6%AD%B7%E7%A8%8B-history.js/</link>
      <pubDate>Tue, 07 Apr 2015 14:16:45 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E7%80%8F%E8%A6%BD%E6%AD%B7%E7%A8%8B-history.js/</guid>
      <description>AJAX 載入會使得瀏覽器的瀏覽歷程沒辦法正確運作。 HTML5 的 History API 滿足了方面的需求。 而 History.js 把 HTML5 跟 HTML4 以及各個瀏覽器之間的差異統一了。 1 2 3 4 5 History.Adapter.bind(window,&amp;#39;statechange&amp;#39;,function(){ var State = History.getState(); }); History.pushState({state:1}, &amp;#34;YOUR_TITLE&amp;#34;,</description>
    </item>
    
    <item>
      <title>[ Web ] Accelerate scripts running multiple tasks in parallel using asynchronous programming: Unusual Site Speedup Techniques: Part 3 - PHP Classes blog</title>
      <link>http://localhost:1313/post/web-accelerate-scripts-running-multiple-tasks-in-parallel-using-asynchronous-programming-unusual-site-speedup-techniques-part-3-php-classes-blog/</link>
      <pubDate>Mon, 15 Nov 2010 12:41:05 +0000</pubDate>
      
      <guid>http://localhost:1313/post/web-accelerate-scripts-running-multiple-tasks-in-parallel-using-asynchronous-programming-unusual-site-speedup-techniques-part-3-php-classes-blog/</guid>
      <description>http://www.phpclasses.org/blog/post/133-Accelerate-scripts-running-multiple-tasks-in-parallel-using-asynchronous-programming-Unusual-Site-Speedup-Techniques-Part-3.html Introduction 許多伺服器上執行程序會花這麼長的時間，主要在於程序花了很多時間在等待其他程式或者硬體訊息或其他遠端電腦的回應。 那能不能在回應等待的這個時</description>
    </item>
    
    <item>
      <title>[ Web ] Accelerate Page Loading: Unusual Site Speedup Techniques: Part 1 - PHP Classes blog</title>
      <link>http://localhost:1313/post/accelerate-page-loading-unusual-site-speedup-techniques-part-1/</link>
      <pubDate>Mon, 15 Nov 2010 12:20:21 +0000</pubDate>
      
      <guid>http://localhost:1313/post/accelerate-page-loading-unusual-site-speedup-techniques-part-1/</guid>
      <description>http://www.phpclasses.org/blog/post/131-Accelerate-Page-Loading-Unusual-Site-Speedup-Techniques-Part-1.html Introduction 頁面上某些由其他網站提供的資訊，像是廣告、串連內容，可能會拖慢自身網站的速度。 本篇主要說明如何改善該問題。 Why remote content slows the load of Web pages? 載入外部內容</description>
    </item>
    
  </channel>
</rss>